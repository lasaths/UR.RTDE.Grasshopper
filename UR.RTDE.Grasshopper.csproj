<Project Sdk="Microsoft.NET.Sdk">
	
  <PropertyGroup>
    <!-- Select the framework(s) you wish to target.
        Rhino 6: net45
        Rhino 7: net48
        Rhino 8 Windows: net48, net7.0, net7.0-windows, net7.0-windows10.0.22000.0, etc
        Rhino 8 Mac: net7.0, net7.0-macos, net7.0-macos12.0, etc
    -->
    <TargetFrameworks>net7.0-windows;net7.0;net48</TargetFrameworks>
    <EnableDynamicLoading>true</EnableDynamicLoading>
    <TargetExt Condition="'$(Configuration)' != 'Test'">.gha</TargetExt>
    <TargetExt Condition="'$(Configuration)' == 'Test'">.dll</TargetExt>
    <NoWarn>NU1701;NETSDK1086</NoWarn>
    <EnableWindowsTargeting>true</EnableWindowsTargeting>
  </PropertyGroup>
  
  <PropertyGroup>
    <!-- Specifies information for Assembly and Yak -->
    <Version>0.1.2</Version>
    <PackageId>UR.RTDE.Grasshopper</PackageId>
    <Title>UR.RTDE.Grasshopper</Title>
    <Company>UR.RTDE</Company>
    <Authors>lasaths</Authors>
    <Description>Grasshopper components to control Universal Robots via UR.RTDE (C# wrapper). Supports session management, reads (joints/pose/IO/modes), and basic commands.</Description>
    <PackageTags>Rhino;Rhino8;Grasshopper;Grasshopper8;Universal Robots;UR;UR5;UR10;UR20;RTDE;Robotics</PackageTags>
    <PackageProjectUrl>https://www.nuget.org/packages/UR.RTDE/</PackageProjectUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <Product>UR.RTDE.Grasshopper</Product>
    <!-- Build Yak package by default when Yak is available -->
    <BuildYakPackage Condition="'$(BuildYakPackage)' == ''">True</BuildYakPackage>
  </PropertyGroup>

  <!-- Allow test assembly to access internal members -->
  <ItemGroup>
    <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
      <_Parameter1>UR.RTDE.Grasshopper.Tests</_Parameter1>
    </AssemblyAttribute>
  </ItemGroup>
  
  <ItemGroup>
    <PackageReference Include="Grasshopper" Version="8.0.23304.9001" ExcludeAssets="runtime" />
  </ItemGroup>

  <!-- Compile includes are wildcarded; moving files into subfolders is automatically picked up -->
  <ItemGroup>
    <Compile Remove="UR.RTDE.Grasshopper.Tests\**" />
    <EmbeddedResource Remove="UR.RTDE.Grasshopper.Tests\**" />
    <None Remove="UR.RTDE.Grasshopper.Tests\**" />
  </ItemGroup>

  <!-- Embed any PNG icons placed under Resources/Icons -->
  <ItemGroup>
    <EmbeddedResource Include="Resources\Icons\**\*.png" />
  </ItemGroup>

  <!-- Use UR.RTDE via NuGet only -->
  <ItemGroup>
    <PackageReference Include="UR.RTDE" Version="1.0.0" />
  </ItemGroup>

  <!-- Copy UR.RTDE.dll and native dependencies to output directory -->
  <Target Name="CopyURRTDEDependencies" AfterTargets="Build">
    <ItemGroup>
      <URRTDEFiles Include="$(NuGetPackageRoot)ur.rtde\1.0.0\lib\$(TargetFramework)\UR.RTDE.dll" />
      <URRTDENativeFiles Include="$(NuGetPackageRoot)ur.rtde\1.0.0\runtimes\**\*" />
    </ItemGroup>
    
    <Copy SourceFiles="@(URRTDEFiles)" DestinationFolder="$(OutputPath)" Condition="Exists('%(URRTDEFiles.Identity)')" />
    <Copy SourceFiles="@(URRTDENativeFiles)" DestinationFolder="$(OutputPath)\runtimes\%(RecursiveDir)" Condition="Exists('%(URRTDENativeFiles.Identity)')" />
    
    <!-- Also copy native DLLs directly to output directory for easier loading -->
    <ItemGroup>
      <NativeDLLs Include="$(OutputPath)\runtimes\win-x64\native\*.dll" />
    </ItemGroup>
    <Copy SourceFiles="@(NativeDLLs)" DestinationFolder="$(OutputPath)" Condition="Exists('%(NativeDLLs.Identity)')" />
  </Target>
  
  <!-- For Windows only builds -->
  <PropertyGroup Condition="$(TargetFramework.Contains('-windows')) or $(TargetFramework.StartsWith('net4'))">
    <UseWindowsForms>true</UseWindowsForms>
  </PropertyGroup>

  <!-- Reference WinForms for .NET 7.0 on macOS -->
  <ItemGroup Condition="!($(TargetFramework.Contains('-windows')) or $(TargetFramework.StartsWith('net4')))">
    <!-- Rhino 8.11 and later you can use this -->
    <!-- <FrameworkReference Include="Microsoft.WindowsDesktop.App.WindowsForms" /> -->
    
    <!-- Rhino 8.10 and earlier -->
    <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies.net48" Version="1.0.3" ExcludeAssets="all" GeneratePathProperty="true" />
    <Reference Include="$(PkgMicrosoft_NETFramework_ReferenceAssemblies_net48)\build\.NETFramework\v4.8\System.Windows.Forms.dll" Private="False" />
    <PackageReference Include="System.Drawing.Common" Version="7.0.0" ExcludeAssets="runtime" />
  </ItemGroup>

  <!-- Copy icon to output directory for yak packaging -->
  <Target Name="CopyYakIcon" BeforeTargets="BuildYakPackage" Condition="$(BuildYakPackage) == 'True'">
    <PropertyGroup>
      <IconSource>$(MSBuildThisFileDirectory)Resources\Icons\robot-duotone.png</IconSource>
      <IconDestination>$(OutputPath)robot-duotone.png</IconDestination>
    </PropertyGroup>
    <Copy SourceFiles="$(IconSource)" DestinationFiles="$(IconDestination)" Condition="Exists('$(IconSource)')" SkipUnchangedFiles="true" />
  </Target>

  <Target Name="BuildYakPackage" AfterTargets="DispatchToInnerBuilds">
    <PropertyGroup>
      <YakExecutable Condition="$(YakExecutable) == '' and $([MSBuild]::IsOSPlatform(windows)) and Exists('C:\Program Files\Rhino 8\System\Yak.exe')">C:\Program Files\Rhino 8\System\Yak.exe</YakExecutable>
      <YakExecutable Condition="$(YakExecutable) == '' and $([MSBuild]::IsOSPlatform(macos)) and Exists('/Applications/Rhino 8.app/Contents/Resources/bin/yak')">/Applications/Rhino 8.app/Contents/Resources/bin/yak</YakExecutable>
    </PropertyGroup>
    
    <Warning Text="Could not find Yak executable" Condition="$(YakExecutable) == ''" />

    <ItemGroup>
      <YakPackagesToDelete Include="$(OutputPath)\*.yak;$(OutputPath)\**\manifest.yml" />
    </ItemGroup>
    
    <Delete Files="@(YakPackagesToDelete)" />

    <Exec Command="&quot;$(YakExecutable)&quot; spec" WorkingDirectory="$(OutputPath)" Condition="$(BuildYakPackage) == 'True' and '$(YakExecutable)' != '' and Exists($(YakExecutable))" />
    <Exec Command="&quot;$(YakExecutable)&quot; build" WorkingDirectory="$(OutputPath)" Condition="$(BuildYakPackage) == 'True' and '$(YakExecutable)' != '' and Exists($(YakExecutable))" />

  </Target>

  <!-- Generate duotone PNG icons at build time if not present -->
  <Target Name="GenerateDuotoneIcons" BeforeTargets="PrepareResources">
    <PropertyGroup>
      <IconScript>$(MSBuildThisFileDirectory)tools\generate-icons.ps1</IconScript>
      <DoIconGen Condition="Exists('$(IconScript)') and $([MSBuild]::IsOSPlatform(windows))">True</DoIconGen>
    </PropertyGroup>
    <Exec Command="powershell -NoProfile -ExecutionPolicy Bypass -File &quot;$(IconScript)&quot;" Condition="$(DoIconGen) == 'True'" />
  </Target>

</Project>
